from cerbos.sdk.model import Principal, Resource
from cerbos_sqlalchemy import get_query
from fastapi import Depends, FastAPI, HTTPException, status
from sqlalchemy import delete

from cerbos_example.auth import get_query_plan, is_allowed
from cerbos_example.database import Session

from .dependencies import (
    get_db_contact,
    get_principal,
    get_resource_from_contact,
    get_resource_from_new_contact,
)
from .models import Contact, User
from .schemas import ContactSchema

app = FastAPI()


@app.get("/contacts")
def get_contacts(principal: Principal = Depends(get_principal)):
    plan = get_query_plan(principal, "contact", "read")

    query = get_query(
        plan,
        Contact,
        {
            "request.resource.attr.owner_id": User.id,
            "request.resource.attr.department": User.department,
            "request.resource.attr.is_active": Contact.is_active,
            "request.resource.attr.marketing_opt_in": Contact.marketing_opt_in,
        },
        [(User, Contact.owner_id == User.id)],
    )

    # Optionally reduce the returned columns
    # (`with_only_columns` returns a new `select`)
    # NOTE: this is wise to do as standard, to avoid implicit joins generated by sqla
    # `relationship()` usage, if present
    query = query.with_only_columns(
        Contact.id,
        Contact.first_name,
        Contact.last_name,
        Contact.is_active,
        Contact.marketing_opt_in,
    )

    with Session() as session:
        rows = session.execute(query).fetchall()

    return rows


@app.get("/contacts/{contact_id}")
def get_contact(
    db_contact: Contact = Depends(get_db_contact),
    principal: Principal = Depends(get_principal),
    resource: Resource = Depends(get_resource_from_contact),
):
    if not is_allowed("read", principal, resource):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized"
        )

    return db_contact


@app.post("/contacts/new")
def create_contact(
    contact_schema: ContactSchema,
    principal: Principal = Depends(get_principal),
    resource: Resource = Depends(get_resource_from_new_contact),
):
    if not is_allowed("create", principal, resource):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized"
        )

    db_contact = Contact(**contact_schema.dict())
    with Session() as session:
        session.add(db_contact)
        session.commit()
        session.refresh(db_contact)

    return {"result": "Created contact", "contact": db_contact}


@app.put("/contacts/{contact_id}")
def update_contact(
    contact_schema: ContactSchema,
    db_contact: Contact = Depends(get_db_contact),
    principal: Principal = Depends(get_principal),
    resource: Resource = Depends(get_resource_from_contact),
):
    if not is_allowed("update", principal, resource):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized"
        )

    for field, value in contact_schema:
        setattr(db_contact, field, value)

    with Session() as session:
        session.add(db_contact)
        session.commit()
        session.refresh(db_contact)

    return {"result": "Updated contact", "contact": db_contact}


@app.delete("/contacts/{contact_id}")
def delete_contact(
    principal: Principal = Depends(get_principal),
    resource: Resource = Depends(get_resource_from_contact),
):
    if not is_allowed("delete", principal, resource):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized"
        )

    with Session() as session:
        session.execute(delete(Contact).where(Contact.id == resource.id))
        session.commit()

    return {"result": f"Contact {resource.id} deleted"}
